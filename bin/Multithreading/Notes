diff. between run & start
1. New Thread creation: When a program calls the start() method, a new thread is created and then the run() method is executed. But if we directly call the run() method then no new thread will be created and run()
method will be executed as a normal method call on the current calling thread itself and no multi-threading will take place.

2. Multiple invocation: In Java’s multi-threading concept, another most important difference between start() and run() method is that we can’t call the start() method twice otherwise
 it will throw an IllegalStateException whereas run() method can be called multiple times as it is just a normal method calling.

3. start- Defined in java.lang.Thread class.
run -Defined in java.lang.Runnable interface and must be overriden in the implementing class.
===================================================================================================================================================================================================================
1. Object level lock in Java
Object level lock is mechanism when we want to synchronize a non-static method or non-static code block such that only one thread will be able to execute the code block on given instance of the class.
This should always be done to make instance level data thread safe.

2. Class level lock in Java
Class level lock prevents multiple threads to enter in synchronized block in any of all available instances of the class on runtime. This means if in runtime there are 100 instances of DemoClass,
 then only one thread will be able to execute demoMethod() in any one of instance at a time, and all other instances will be locked for other threads.
Class level locking should always be done to make static data thread safe. As we know that static keyword associate data of methods to class level,
so use locking at static fields or methods to make it on class level.

3. Object level lock vs class level lock – Important notes
Synchronization in Java guarantees that no two threads can execute a synchronized method, which requires same lock, simultaneously or concurrently.
synchronized keyword can be used only with methods and code blocks. These methods or blocks can be static or non-static both.
When ever a thread enters into Java synchronized method or block it acquires a lock and whenever it leaves synchronized method or block it releases the lock. Lock is released even if thread leaves synchronized method after completion or due to any Error or Exception.
Java synchronized keyword is re-entrant in nature it means if a synchronized method calls another synchronized method which requires same lock then current thread which is holding lock can enter into that method without acquiring lock.
Java synchronization will throw NullPointerException if object used in synchronized block is null. For example, in above code sample if lock is initialized as null, the “synchronized (lock)” will throw NullPointerException.
Synchronized methods in Java put a performance cost on your application. So use synchronization when it is absolutely required. Also, consider using synchronized code blocks for synchronizing only critical section of your code.
It’s possible that both static synchronized and non static synchronized method can run simultaneously or concurrently because they lock on different object.
According to the Java language specification you can not use synchronized keyword with constructor. It is illegal and result in compilation error.
Do not synchronize on non final field on synchronized block in Java. because reference of non final field may change any time and then different thread might synchronizing on different objects i.e. no synchronization at all.
Do not use String literals because they might be referenced else where in the application and can cause deadlock. String objects created with new keyword can be used safely. But as a best practice, create a new private scoped Object instance OR lock on the shared variable itself which we want to protect.


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
CountDownLatch is  a class in java that is used to make sure that a task waits for other threads before it starts. To understand its application,
let us consider a server where the main task can only start when all the required services have started.

Working of CountDownLatch:
When we create an object of CountDownLatch, we specify the number of threads it should wait for, all such thread are required to do count down by calling CountDownLatch.countDown()
once they are completed or ready to the job. As soon as count reaches zero, the waiting task starts running.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
BlockingQueue interface in Java is added in Java 1.5 along with various other concurrent Utility classes like ConcurrentHashMap,
 Counting Semaphore, CopyOnWriteArrrayList etc. BlockingQueue interface supports flow control (in addition to queue)
 by introducing blocking if either BlockingQueue is full or empty. A thread trying to enqueue an element in a full queue
  is blocked until some other thread makes space in the queue, either by dequeuing one or more element or clearing the queue completely.
  Similarly it blocks a thread trying to delete from an empty queue until some other treads inserts an item. BlockingQueue does not accept
  null value. If we try to enqueue null item, then it throws NullPointerException.

Java provides several BlockingQueue implementations such as LinkedBlockingQueue, ArrayBlockingQueue, PriorityBlockingQueue,
 SynchronousQueue etc. Java BlockingQueue interface implementations are thread-safe. All methods of BlockingQueue are atomic in
  nature and use internal locks or other forms of concurrency control. Java 5 comes with BlockingQueue implementations in the java.util.concurrent package.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Reentrant Lock in Java


The traditional way to achieve thread synchronization in Java is by the use of synchronized keyword.
While it provides a certain basic synchronization, the synchronized keyword is quite rigid in its use.
 For example, a thread can take a lock only once. Synchronized blocks don’t offer any mechanism of a waiting
 queue and after the exit of one thread, any thread can take the lock. This could lead to starvation of resources for some other thread for a very long period of time.

Reentrant Locks are provided in Java to provide synchronization with greater flexibility.

What are Reentrant Locks?
The ReentrantLock class implements the Lock interface and provides synchronization to methods while accessing shared resources.
 The code which manipulates the shared resource is surrounded by calls to lock and unlock method. This gives a lock to the current
 working thread and blocks all other threads which are trying to take a lock on the shared resource.

As the name says, ReentrantLock allow threads to enter into lock on a resource more than once. When the thread first enters into lock, a
 hold count is set to one. Before unlocking the thread can re-enter into lock again and every time hold count is incremented by one.
 For every unlock request, hold count is decremented by one and when hold count is 0, the resource is unlocked.

Reentrant Locks also offer a fairness parameter, by which the lock would abide by the order of the lock request i.e. after a
 thread unlocks the resource, the lock would go to the thread which has been waiting for the longest time. This fairness mode
  is set up by passing true to the constructor of the lock.
